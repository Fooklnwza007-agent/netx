/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.dormnew.GUI;


import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;




/**
 *
 * @author Lenovo
 */
public class RoomAdmin extends javax.swing.JFrame {
    DefaultTableModel RoomModel; 
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(RoomAdmin.class.getName());

    /**
     * Creates new form RoomAdmin
     */
    public RoomAdmin() {
        initComponents();
        
        RoomModel = new DefaultTableModel(new String[]{"Room", "Status"}, 0);
        RoomTable.setModel(RoomModel);
        
        loadDormList();
    }
    
    
    
    private void loadRoomCSV(String dormName) {
    String fileName = "src/main/java/com/mycompany/dormnew/File/" 
                      + dormName.replaceAll("\\s+", "") + "Room.csv";

    RoomModel.setRowCount(0); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤

    java.io.File file = new java.io.File(fileName);
    if (!file.exists()) {
        try (java.io.PrintWriter pw = new java.io.PrintWriter(file)) {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Cannot create file: " + fileName);
        }
    }

    try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
        String line;
        while ((line = br.readLine()) != null) {
            String[] parts = line.split("\\s+", 2); // Room + Status
            if (parts.length == 2) {
                RoomModel.addRow(parts);
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Load failed: " + fileName);
    }
    }

    
    private void saveRoomCSV(String dormName) {
    String fileName = "src/main/java/com/mycompany/dormnew/File/" 
                      + dormName.replaceAll("\\s+", "") + "Room.csv";
    try (java.io.PrintWriter pw = new java.io.PrintWriter(fileName)) {
        for (int i = 0; i < RoomModel.getRowCount(); i++) {
            pw.println(RoomModel.getValueAt(i, 0) + " " + RoomModel.getValueAt(i, 1));
        }
        JOptionPane.showMessageDialog(this, "Saved to " + fileName);
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Save failed: " + e.getMessage());
    }
}
    private void loadDormList() {
    DormSelect.removeAllItems();
    String filePath = "src/main/java/com/mycompany/dormnew/File/Dormlist.csv";
    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
        String line;
        while ((line = br.readLine()) != null) {
            DormSelect.addItem(line.trim());
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "FIle not found : Dormlist.csv");
    }
}

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        RoomTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        DormSelect = new javax.swing.JComboBox<>();

        jButton2.setText("jButton2");

        setBackground(new java.awt.Color(255, 255, 255));

        RoomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "RoomId", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(RoomTable);
        if (RoomTable.getColumnModel().getColumnCount() > 0) {
            RoomTable.getColumnModel().getColumn(0).setResizable(false);
            RoomTable.getColumnModel().getColumn(1).setResizable(false);
        }

        jButton1.setText("Add Room");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Set Status Room");
        jButton3.setActionCommand("Set Room");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        DormSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DormSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DormSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton1)
                    .addComponent(DormSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(DormSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int selected = RoomTable.getSelectedRow();
    if (selected != -1) {
        String status = JOptionPane.showInputDialog(this, "Set Status for Room:", 
            RoomModel.getValueAt(selected, 0));
        if (status != null && !status.trim().isEmpty()) {
            RoomModel.setValueAt(status.trim(), selected, 1);
            
            String dormName = JOptionPane.showInputDialog(this, "Enter Dorm Name to save:");
            if (dormName != null && !dormName.trim().isEmpty()) {
                saveRoomCSV(dormName.trim());
            }
            if (dormName == null || dormName.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please input your Dorm");
            return ;
    }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a room first!");
    }int selectedRow = RoomTable.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a room first!");
        return;
    }
    
    
    // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á ComboBox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Status
String[] statusOptions = {"Currently booking", "is not available."};
javax.swing.JComboBox<String> statusCombo = new javax.swing.JComboBox<>(statusOptions);

// üîπ ‡πÉ‡∏ä‡πâ JOptionPane ‡πÅ‡∏™‡∏î‡∏á ComboBox
int result = JOptionPane.showConfirmDialog(this, statusCombo, 
        "Set Status for Room: " + RoomModel.getValueAt(selected, 0),
        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

if (result == JOptionPane.OK_OPTION) {
    String status = (String) statusCombo.getSelectedItem();
    RoomModel.setValueAt(status, selected, 1);

    // üîπ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠‡∏à‡∏≤‡∏Å selectDorm ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    String dormName = (String) DormSelect.getSelectedItem();
    if (dormName != null && !dormName.trim().isEmpty()) {
        saveRoomCSV(dormName.trim());
    } else {
        JOptionPane.showMessageDialog(this, "Dorm not selected!");
    }
    }
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void addRoom(String roomId) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    String dormName = (String) DormSelect.getSelectedItem();
    if (dormName == null || dormName.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please select a Dorm first!");
        return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≥
    for (int i = 0; i < RoomModel.getRowCount(); i++) {
        if (RoomModel.getValueAt(i, 0).toString().equalsIgnoreCase(roomId)) {
            JOptionPane.showMessageDialog(this, "This room already exists!");
            return;
        }
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    RoomModel.addRow(new Object[]{roomId, "Free"});

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÑ‡∏õ CSV
    saveRoomCSV(dormName);
}
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String selectedDorm = (String) DormSelect.getSelectedItem();
    if (selectedDorm == null || selectedDorm.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please select a dorm first!");
        return;
    }

    String roomName = JOptionPane.showInputDialog(this, "Enter Room Name:");
    if (roomName != null && !roomName.trim().isEmpty()) {
        RoomModel.addRow(new Object[]{roomName, "Currently booking"});
        saveRoomCSV(selectedDorm);
        loadRoomCSV(selectedDorm);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void DormSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DormSelectActionPerformed
        String selectedDorm = (String) DormSelect.getSelectedItem();
        if (selectedDorm != null && !selectedDorm.isEmpty()) {
            loadRoomCSV(selectedDorm);
        }
    }//GEN-LAST:event_DormSelectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new RoomAdmin().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> DormSelect;
    private javax.swing.JTable RoomTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
